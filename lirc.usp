/*******************************************************************************************
  SIMPL+ Module Information
  (Fill in comments below)
*******************************************************************************************/
/*
Dealer Name:
System Name:
System Number:
Programmer: Aleks Rozman
Comments: Created as a sample for the GitHub community
*/

/*******************************************************************************************
  Compiler Directives
  (Uncomment and declare compiler directives as needed)
*******************************************************************************************/
// #ENABLE_DYNAMIC
#SYMBOL_NAME "LIRC"
#HINT "Controls LINUX IR Control Service"
#DEFINE_CONSTANT STRING_NONE  0
#DEFINE_CONSTANT STRING_UP    1
#DEFINE_CONSTANT STRING_DOWN  2
#DEFINE_CONSTANT STRING_LEFT  3
#DEFINE_CONSTANT STRING_RIGHT 4
#DEFINE_CONSTANT STRING_OK    5
#DEFINE_CONSTANT STRING_HOME  6
#DEFINE_CONSTANT STRING_PLAY  7
#DEFINE_CONSTANT STRING_PAUSE 8
#DEFINE_CONSTANT STRING_STOP  9
#DEFINE_CONSTANT STRING_REW   10
#DEFINE_CONSTANT STRING_FF    11
#DEFINE_CONSTANT STRING_SAMPLE 12

#CATEGORY "41" // Remote System Interface
// #PRINT_TO_TRACE
// #DIGITAL_EXPAND 
// #ANALOG_SERIAL_EXPAND 
// #OUTPUT_SHIFT 
// #HELP_PDF_FILE ""
#DEFAULT_VOLATILE
#ENABLE_STACK_CHECKING
// #ENABLE_TRACE
#ENCODING_ASCII
// #ENCODING_UTF16
// #ENCODING_INHERIT_FROM_PARENT
// #ENCODING_INHERIT_FROM_PROGRAM
/*
#HELP_BEGIN
   Simulates a Linux InfraRed remote control by leveraging the feature on linux computers to listen over sockets instead. This allows the operator to use existing software that would otherwise be controlled by a LIRC
#HELP_END
*/

/*******************************************************************************************
  Include Libraries
  (Uncomment and include additional libraries as needed)
*******************************************************************************************/
// #CRESTRON_LIBRARY ""
// #USER_LIBRARY ""

/*******************************************************************************************
  DIGITAL, ANALOG and SERIAL INPUTS and OUTPUTS
  (Uncomment and declare inputs and outputs as needed)
*******************************************************************************************/
DIGITAL_INPUT pad_up, pad_down, pad_left, pad_right, pad_ok, home, play, pause, stop, rew, ff, sample;
// ANALOG_INPUT 
// STRING_INPUT 
// BUFFER_INPUT 

//DIGITAL_OUTPUT
// ANALOG_OUTPUT 
// STRING_OUTPUT 

/*******************************************************************************************
  SOCKETS
  (Uncomment and define socket definitions as needed)
*******************************************************************************************/
TCP_CLIENT Computer[255];
// TCP_SERVER
// UDP_SOCKET

/*******************************************************************************************
  Parameters
  (Uncomment and declare parameters as needed)
*******************************************************************************************/
INTEGER_PARAMETER PORT;
// SIGNED_INTEGER_PARAMETER
// LONG_INTEGER_PARAMETER
// SIGNED_LONG_INTEGER_PARAMETER
STRING_PARAMETER IP[20];

/*******************************************************************************************
  Parameter Properties
  (Uncomment and declare parameter properties as needed)
*******************************************************************************************/

#BEGIN_PARAMETER_PROPERTIES IP
   propValidUnits = unitString;
   propDefaultUnit = unitString;
   // propBounds = lower_bound , upper_bound;
   // propDefaultValue = ;  // or, propDefaultValue = "";
   // propList = // { "value" , "label" } , { "value" , "label" } , ... ;
   propShortDescription = "IP Address of LIRC";
   // #BEGIN_PROP_FULL_DESCRIPTION  line_1...  line_2...  line_n  #END_PROP_FULL_DESCRIPTION
   // #BEGIN_PROP_NOTES line_1...  line_2...  line_n  #END_PROP_NOTES
#END_PARAMETER_PROPERTIES

#BEGIN_PARAMETER_PROPERTIES PORT
   propValidUnits = unitDecimal;
   propDefaultUnit = unitDecimal;
   propBounds = 1024d, 65535d;
   propDefaultValue = 8765d;
   // propList = // { "value" , "label" } , { "value" , "label" } , ... ;
   propShortDescription = "Port of LIRC";
   // #BEGIN_PROP_FULL_DESCRIPTION  line_1...  line_2...  line_n  #END_PROP_FULL_DESCRIPTION
   // #BEGIN_PROP_NOTES line_1...  line_2...  line_n  #END_PROP_NOTES
#END_PARAMETER_PROPERTIES


/*******************************************************************************************
  Structure Definitions
  (Uncomment and define structure definitions as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: struct.myString = "";
*******************************************************************************************/
/*
STRUCTURE MyStruct1
{
};

MyStruct1 struct;
*/

/*******************************************************************************************
  Global Variables
  (Uncomment and declare global variables as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: myString = "";
*******************************************************************************************/
INTEGER lastCommand, connected;
// LONG_INTEGER
// SIGNED_INTEGER
// SIGNED_LONG_INTEGER
// STRING

/*******************************************************************************************
  Functions
  (Add any additional functions here)
  Note:  Functions must be physically placed before the location in
         the code that calls them.
*******************************************************************************************/

Function SendCommand(integer command)
{
// NOTE: HULU is the name of the remote on the linux computer
 if(connected = 1)
 {
   switch(command)
	 {
	  case(STRING_UP):
		SocketSend(Computer, "SIMULATE 0000000000000000 0 Up HULU\n");
	  case(STRING_DOWN):
		SocketSend(Computer, "SIMULATE 0000000000000000 0 Down HULU\n");
	  case(STRING_LEFT):
		SocketSend(Computer, "SIMULATE 0000000000000000 0 Left HULU\n");
	  case(STRING_RIGHT):
		SocketSend(Computer, "SIMULATE 0000000000000000 0 Right HULU\n");
	  case(STRING_OK):
		SocketSend(Computer, "SIMULATE 0000000000000000 0 OK HULU\n");
	  case(STRING_HOME):
		SocketSend(Computer, "SIMULATE 0000000000000000 0 Home HULU\n");
	  case(STRING_PLAY):
		SocketSend(Computer, "SIMULATE 0000000000000000 0 OK HULU\n");	
	  case(STRING_PAUSE):
		SocketSend(Computer, "SIMULATE 0000000000000000 0 OK HULU\n");
	  case(STRING_STOP):
		SocketSend(Computer, "SIMULATE 0000000000000000 0 OK HULU\n");
	  case(STRING_REW):
		SocketSend(Computer, "SIMULATE 0000000000000000 0 Left HULU\n");
	  case(STRING_FF):
		SocketSend(Computer, "SIMULATE 0000000000000000 0 Right HULU\n");
	  case(STRING_SAMPLE):
		SocketSend(Computer, "SIMULATE 0000000000000000 0 Sample HULU\n");
	 }
	 lastCommand = command;
 }
}

Function Pass(integer command)
{
 if(connected = 1)
 {
  SendCommand(command);
 }
 else
 {
  lastCommand = command;
  SocketConnectClient(Computer, IP, PORT, 0);
 }
}


/*
Integer_Function MyIntFunction1()
{
    // TODO:  Add local variable declarations here

    // TODO:  Add code here

    Return (0);
}
*/

/*
String_Function MyStrFunction1()
{
    // TODO:  Add local variable declarations here

    // TODO:  Add code here

    Return ("");
}
*/

/*******************************************************************************************
  Event Handlers
  (Uncomment and declare additional event handlers as needed)
*******************************************************************************************/

PUSH pad_up
{
 Pass(STRING_UP);
}
PUSH pad_down
{
 Pass(STRING_DOWN);
}
PUSH pad_left
{
 Pass(STRING_LEFT);
}
PUSH pad_right
{
 Pass(STRING_RIGHT);
}
PUSH pad_ok
{
 Pass(STRING_OK);
}
PUSH home
{
 Pass(STRING_HOME);
}
PUSH play
{
 Pass(STRING_PLAY);
}
PUSH pause
{
 Pass(STRING_PAUSE);
}
PUSH stop
{
 Pass(STRING_STOP);
}
PUSH rew
{
 Pass(STRING_REW);
}
PUSH ff
{
 Pass(STRING_FF);
}
PUSH sample
{
 Pass(STRING_SAMPLE);
}

/*
RELEASE input
{
    // TODO:  Add code here
}
*/

/*
CHANGE input
{
    // TODO:  Add code here
}
*/

/*
EVENT
{
    // TODO:  Add code here
}
*/


SOCKETCONNECT Computer
{
 connected = 1;
 if(lastCommand != STRING_NONE)
 {
  SendCommand(lastCommand);
  SocketDisconnectClient(Computer);
  connected = 0;
 }
}



SOCKETDISCONNECT Computer
{
 connected = 0;
}



SOCKETRECEIVE Computer
{
}



/*******************************************************************************************
  Main()
  Uncomment and place one-time startup code here
  (This code will get called when the system starts up)
*******************************************************************************************/

Function Main()
{
 lastCommand = STRING_NONE;
 connected = 0;
}


